<powershell>
### This script configures a server for usage with AWS custom CloudWatch metrics.  It creates scheduled tasks to run the custom metrics script on a schedule. ###
Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force

# Set Execution Policy
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Force

# Install AWS Powershell Module
Install-Module AWSPowershell -Force

# Create scheduled task for custom CloudWatch metrics
$path = "C:\Scripts\GPUStats.ps1" # Specify path to cloudwatch custom metric script
$taskName = 'AWSCloudWatchCustomMetrics' 
$description = 'Scheduled task for custom CloudWatch metrics' 
$action = New-ScheduledTaskAction -Execute 'Powershell.exe' -Argument "-File `"$path`""
$principal = New-ScheduledTaskPrincipal -UserID "Administrator" -LogonType S4U -RunLevel Highest 
$trigger =  New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Minutes 5)
$settings = New-ScheduledTaskSettingsSet -ExecutionTimeLimit (New-TimeSpan -Minutes 5)
Register-ScheduledTask -Action $action -Trigger $trigger -TaskName $taskName -Description $description -Settings $settings -Principal $principal

# Start AWSCloudWatch task
Start-ScheduledTask -TaskName $taskName

# Create scheduled task for starting AWSCloudWatch task on startup
$action = New-ScheduledTaskAction -Execute 'Powershell.exe' -Argument '-Command "Start-ScheduledTask -TaskName $taskName'
$trigger = New-ScheduledTaskTrigger -AtStartup
Register-ScheduledTask -Action $action -Trigger $trigger -TaskName "AWSCloudWatchInit" -Description "Starts indefinite repetition of AWSCloudWatch task"



mkdir C:\Scripts 
New-Item C:\Scripts\GPUStats.ps1
Set-Content C:\Scripts\GPUStats.ps1 -Value @' 
#Get Stats from NVIDIA-SMI 
$STATS = & 'C:\Program Files\NVIDIA Corporation\NVSMI\nvidia-smi.exe' --query-gpu=temperature.gpu,memory.used,memory.free,utilization.gpu,utilization.memory --format=csv,nounits
#Convert to PS Object 
$object = ConvertFrom-Csv -InputObject $STATS -Delimiter ','

### This script creates custom CloudWatch metrics in AWS and sends metric data ###
# Fill $param, $namespace, and $instanceID with the proper values #
Import-Module AWSPowerShell
# AWS Defaults data
#$param = @{
#    region      = '';
#    AccessKey   = '';
 #   SecretKey   = '';
#}
# Initialize AWS
#Initialize-AWSDefaults @param -Verbose
# Instance and namespace variables
#$namespace = "CustomMetrics"
#$namespace = "GPUStats"
$instanceID = Get-EC2InstanceMetadata -Path '/instance-id'
 
# GPU Metrics
$dat = New-Object Amazon.CloudWatch.Model.MetricDatum
$dat.Timestamp=(Get-Date).ToUniversalTime()
$dat.MetricName="Temperature"
$dat.Value=$object.'temperature.gpu'
$dat.Unit="None"
$dim = New-Object Amazon.CloudWatch.Model.Dimension
$dim.Name = "InstanceID"
$dim.Value = $instanceID
$dat.Dimensions=$dim
Write-CWMetricData -Namespace "GPUStats" -MetricData $dat -Verbose


$dat = New-Object Amazon.CloudWatch.Model.MetricDatum
$dat.Timestamp=(Get-Date).ToUniversalTime()
$dat.MetricName="MemoryUsed"
$dat.Value=$object.'memory.used [MiB]'
$dat.Unit="Megabytes"
$dim = New-Object Amazon.CloudWatch.Model.Dimension
$dim.Name = "InstanceID"
$dim.Value = $instanceID
$dat.Dimensions=$dim
Write-CWMetricData -Namespace "GPUStats" -MetricData $dat -Verbose

$dat = New-Object Amazon.CloudWatch.Model.MetricDatum
$dat.Timestamp=(Get-Date).ToUniversalTime()
$dat.MetricName="MemoryFree"
$dat.Value=$object.'memory.free [MiB]'
$dat.Unit="Megabytes"
$dim = New-Object Amazon.CloudWatch.Model.Dimension
$dim.Name = "InstanceID"
$dim.Value = $instanceID
$dat.Dimensions=$dim
Write-CWMetricData -Namespace "GPUStats" -MetricData $dat -Verbose

$dat = New-Object Amazon.CloudWatch.Model.MetricDatum
$dat.Timestamp=(Get-Date).ToUniversalTime()
$dat.MetricName="GPUUtilization"
$dat.Value=$object.'utilization.gpu [%]'
$dat.Unit="Percent"
$dim = New-Object Amazon.CloudWatch.Model.Dimension
$dim.Name = "InstanceID"
$dim.Value = $instanceID
$dat.Dimensions=$dim
Write-CWMetricData -Namespace "GPUStats" -MetricData $dat -Verbose

$dat = New-Object Amazon.CloudWatch.Model.MetricDatum
$dat.Timestamp=(Get-Date).ToUniversalTime()
$dat.MetricName="MemoryUtilization"
$dat.Value="$($object.'utilization.memory [%]')"
$dat.Unit="Percent"
$dim = New-Object Amazon.CloudWatch.Model.Dimension
$dim.Name = "InstanceID"
$dim.Value = $instanceID
$dat.Dimensions=$dim
Write-CWMetricData -Namespace "GPUStats" -MetricData $dat -Verbose



# Memory
$ram = [math]::Round((Get-WmiObject Win32_OperatingSystem | Select-Object -ExpandProperty TotalVisibleMemorySize)/1MB, 2)
$data = New-Object Amazon.CloudWatch.Model.MetricDatum
$dim = New-Object Amazon.CloudWatch.Model.Dimension
$dim.Name = "InstanceID"
$dim.Value = $instanceID
$data.Dimensions = $dim
$data.Timestamp = (Get-Date).ToUniversalTime()
$data.MetricName = "Total Memory"
$data.Unit = "Gigabytes"
$data.Value = "$($ram)"
Write-CWMetricData -Namespace "CustomMetrics" -MetricData $data -Verbose
     
$free = [math]::Round((Get-WmiObject Win32_OperatingSystem | Select-Object -ExpandProperty FreePhysicalMemory)/1MB, 2)
$data = New-Object Amazon.CloudWatch.Model.MetricDatum
$dim = New-Object Amazon.CloudWatch.Model.Dimension
$dim.Name = "InstanceID"
$dim.Value = $instanceID
$data.Dimensions = $dim
$data.Timestamp = (Get-Date).ToUniversalTime()
$data.MetricName = "Free Memory"
$data.Unit = "Gigabytes"
$data.Value = "$($free)"
Write-CWMetricData -Namespace "CustomMetrics" -MetricData $data -Verbose
 
$data = New-Object Amazon.CloudWatch.Model.MetricDatum
$dim = New-Object Amazon.CloudWatch.Model.Dimension
$dim.Name = "InstanceID"
$dim.Value = $instanceID
$data.Dimensions = $dim
$data.Timestamp = (Get-Date).ToUniversalTime()
$data.MetricName = "Memory Usage"
$data.Unit = "Percent"
$data.Value = "$((($ram - $free) / $ram) * 100)"
Write-CWMetricData -Namespace "CustomMetrics" -MetricData $data -Verbose
 
# Disk
$disks = Get-WmiObject Win32_LogicalDisk -Filter "DriveType=3" | Select-Object @{Label="DriveLetter"; Expression={$_.DeviceID}},@{Label="Name"; Expression={$_.VolumeName}},@{Label="Free"; Expression={“{0:N2}” -f ($_.FreeSpace / 1GB)}},@{Label="Total"; Expression={“{0:N2}” -f ($_.Size / 1GB)}}
foreach ($disk in $disks) {
    $drive = $disk.DriveLetter
    $data = New-Object Amazon.CloudWatch.Model.MetricDatum
    $dim = New-Object Amazon.CloudWatch.Model.Dimension
    $dim.Name = "InstanceID"
    $dim.Value = $instanceID
    $data.Dimensions = $dim
    $data.Timestamp = (Get-Date).ToUniversalTime()
    $data.Unit = "Gigabytes"
    $data.Value = "$($disk.Total)"
    $data.MetricName = "$drive Total"
    Write-CWMetricData -Namespace "CustomMetrics" -MetricData $data -Verbose
 
    $data = New-Object Amazon.CloudWatch.Model.MetricDatum
    $dim = New-Object Amazon.CloudWatch.Model.Dimension
    $dim.Name = "InstanceID"
    $dim.Value = $instanceID
    $data.Dimensions = $dim
    $data.Timestamp = (Get-Date).ToUniversalTime()
    $data.Unit = "Gigabytes"
    $data.Value = "$($disk.Free)"
    $data.MetricName = "$drive Free"
    Write-CWMetricData -Namespace "CustomMetrics" -MetricData $data -Verbose
 
    $data = New-Object Amazon.CloudWatch.Model.MetricDatum
    $dim = New-Object Amazon.CloudWatch.Model.Dimension
    $dim.Name = "InstanceID"
    $dim.Value = $instanceID
    $data.Dimensions = $dim
    $data.Timestamp = (Get-Date).ToUniversalTime()
    $data.MetricName = "$drive Usage"
    $data.Unit = "Percent"
    $data.Value = "$((($disk.Total - $disk.Free) / $disk.Total) * 100)"
    Write-CWMetricData -Namespace "CustomMetrics" -MetricData $data -Verbose
}
echo $object 
exit 
'@
</powershell>